function rgba(r,g,b,a) { return `rgba(${r},${g},${b},${a})`; }

const clamp = (num, min, max) => Math.min(Math.max(num, min), max);

const controls = ReactDOM.createRoot(document.getElementById('controls'));

class Turtle {
  constructor(x, y, color, ctx) {
    this.x = x;
    this.y = y;
    this.color = Object.assign({}, color);
    this.ctx = ctx;
//    this.color = {r: 0,
//                 g: 250,
//                 b: 0,
//                 a: 1.0};
    this.penDown = true;
    this.facing = "N";
    this.directions = ["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"]; //clockwise starting at N
  }
  colorstr() {
    let {r,g,b,a} = this.color;
    return rgba(r,g,b,a);
  }
  clickPen() { this.penDown = !this.penDown; }
  
  goto(x, y) {
    this.x = x;
    this.y = y;
  }
  
  nop() {
    return;
  }
  
  moveForward(n) {
    this.move(this.facing, n);
  }
  
 prob(p) {
   
 }
  
  turn(direction, amount) { 
    let i = this.directions.findIndex(e => e === this.facing);
    if(direction === "L") {
      this.facing = this.directions.at((i - amount) % -this.directions.length);
    } else if(direction === "R") {
      this.facing = this.directions.at((i + amount) % this.directions.length);
    }
  }
  
  shade(amount) {
    let {r,g,b} = this.color;
    this.color["r"] = clamp(r * (1 - amount), 0, 255);
    this.color["g"] = clamp(g * (1 - amount), 0, 255);
    this.color["b"] = clamp(b * (1 - amount), 0, 255);
  }
  
  tint(amount) {
    let {r,g,b} = this.color;
    this.color["r"] = clamp(r + (255 - r) * amount, 0, 255);
    this.color["g"] = clamp(g + (255 - g) * amount, 0, 255);
    this.color["b"] = clamp(b + (255 - b) * amount, 0, 255);
  }
  
  move(direction, n) {
    switch(direction) {
      case "N":
        if(this.penDown){
          this.ctx.fillStyle = this.colorstr();
          this.ctx.fillRect(this.x,this.y-1,1,-n);
        }
        this.facing = "N";
        this.y -= n;
        break;
        
      case "NNE":
        for(let i = 0; i < n/2; i++) {
          this.move("NE",1);
          this.move("N",1);
        }
        this.facing = "NNE";
        break;
        
      case "NE": 
        var pen = this.penDown;
        for(let i = 0; i < n; i++) {
          this.penDown = false;
          this.move("N",1);
          this.penDown = pen;
          this.move("E",1);
        }
        this.facing = "NE";
        break;
      case "ENE":
        for(let i = 0; i < n/2; i++) {
          this.move("NE",1);
          this.move("E",1);
        }
        this.facing = "ENE";
        break;
    
      case "E":
        if(this.penDown){
          this.ctx.fillStyle = this.colorstr();
          this.ctx.fillRect(this.x+1,this.y-1,n,1);
        }
        this.facing = "E";
        this.x += n;
        break;
        
      case "ESE":
        for(let i = 0; i < n/2; i++) {
          this.move("SE",1);
          this.move("E",1);
        }
        this.facing = "ESE";
        break;
        
      case "SE":
        var pen = this.penDown;
        for(let i = 0; i < n; i++) {
          this.penDown = false;
          this.move("S",1);
          this.penDown = pen;
          this.move("E",1);
        }
        this.facing = "SE";
        break;
        
      case "SSE":
        for(let i = 0; i < n/2; i++) {
          this.move("SE",1);
          this.move("S",1);
        }
        this.facing = "SSE";
        break;
      case "S":
        if(this.penDown){
          this.ctx.fillStyle = this.colorstr();
          this.ctx.fillRect(this.x,this.y,1,n);
        }
        this.facing = "S";
        this.y += n;
        break;
        
      case "SSW":
        for(let i = 0; i < n/2; i++) {
          this.move("SW",1);
          this.move("S",1);
        }
        this.facing = "SSW";
        break;
        
      case "SW": 
        var pen = this.penDown;
        for(let i = 0; i < n; i++) {
          this.penDown = false;
          this.move("S",1);
          this.penDown = pen;
          this.move("W",1);
        }
        this.facing = "SW";
        break;
      case "WSW":
        for(let i = 0; i < n/2; i++) {
          this.move("SW",1);
          this.move("W",1);
        }
        this.facing = "WSW";
        break;
        
      case "W":
        if(this.penDown){
          this.ctx.fillStyle = this.colorstr();
          this.ctx.fillRect(this.x,this.y-1,-n,1);
        }
        this.x -= n;
        this.facing = "W";
        break;
      case "WNW":
        for(let i = 0; i < n/2; i++) {
          this.move("NW",1);
          this.move("W",1);
        }
        this.facing = "WNW";
        break;
        
      case "NW":
        var pen = this.penDown;
        for(let i = 0; i < n; i++) {
          this.penDown = false;
          this.move("N", 1);
          this.penDown = pen;
          this.move("W", 1);
        }
        this.facing = "NW";
        break;
      case "NNW":
        for(let i = 0; i < n/2; i++) {
          this.move("NW",1);
          this.move("N",1);
        }
        this.facing = "NNW";
        break;
    } 
  }
}

function applyRules(t, sentence, fn, n, alphabet) {
  let end = sentence;
  
  for(let i = 1; i <= n; i++) {
    //console.log(end);
    end = fn(end, alphabet);
    if (i == n) {draw(end, t, alphabet);} 
  }
  return end;
}

const exampleAlphabet = {
  // Fields: name, variables, constants, probs
  name: "Example/Documentation Alphabet",
  
  // The keys in the following data structures should be single characters and are read by computeSentence(); recursively.
  // 
  // variables: Characters that are re-written by the string in [0]. The rewrite string should only contain characters defined in variables, constants, or probs
  //   The array (value[1]) of arrays correspond to turtle commands run by draw()
  //   see draw() for documentation on DSL.
  variables: { 'C': ["CC",
                      [["fwd", 2]]]},
  
  // constants: Like variables, but do not get re-written. Draw commands belong in the same form as in variables.
  //  Special constants: 
  //    [ : pushes turtle position, orientation, and color to a stack during draw();
  //    ] : pops the stack, returning above values to where they were before.
  //    There is no validation for balancing the brackets. Expect undefined weirdness for unbalanced brackets.
  constants: {"[": [["tcw", 2]],
              "]": [["tcc", 2]]},
  
  // probs: Like variables, but no draw commands, and the rewrite rules are chosen by chances in values[n][1] (eg, 0.5 = 50% chance)
  // todo: add default for p<1.0
  probs: { "b": [["C[b]", 0.5],
                 ["b[C]", 0.5]]}
  
}

const binaryTreeAlphabet = {
  name: "Binary Tree",
  //variables: process rule [0], drawing commands and parameters in [1]
  variables: {'A': ["AA", 
                    [["fwd", 2]]], 
              'B': ["A[B]B", 
                    [["fwd", 2]]]},
  //constants: draw commands, params (no re-write rules).
  constants: {"[": [["tcw", 2]], 
              "]": [["tcc", 2]]}
}

const probAlphabet = {
  name: "Prob",
  variables: { "F": ["F", [["fwd", 1]]],
               //"X": ["FF[VF[FFYFF[Q]]]", [["fwd", 1]]],
               'X': ["XF[++XIF]X[F[--Fq]]", [["fwd", 1]]],
               "B": ["F[v[[F]FX]vX[[Fq]]]", [["fwd", 1]]],
               "I": ["[vXFvB]", [["nop"]]],
               "U": ["U", [["tup", 1]]],
               "T": ["", [["tnt", 0.01]]],
               "S": ["", [["shd", 0.01]]]},
  constants: { "[": [["nop"]], 
               "]": [["nop"]],
               "R": [["cr+", 25],
                     ["cg-", 25]],
               "D": [["cr+", 25]],
               "+": [["tcc", 1]],
               "-": [["tcw", 1]]},
  probs: { "y": [["FF[XvTDTT[vFB]]", 0.5], 
                 ["FF[XvSDSS[vFB]]", 0.5]],
           "c": [["TTTT", 0.5],
                 ["SSSS", 0.5]],
           "v": [["-", 0.5],
                 ["+", 0.5]],
           "q": [["FFFU+++RRRRRccc[F----F----F----F----F----F]", 0.1],
                ["y", 0.9]]}
}

const fernAlphabet = {
  //variables: process rule [0], drawing commands and parameters in [1]
  name: "Fern (var. 3)",
  variables: {'F': ["FF", 
                    [["fwd", 1]]], 
              //'X': ["F+[[X]-X]-F[-FX]+X",
              //'X': ["F+[[X]+X]-F[-FX]-X+[X]",
//              'X': ["XF+[X[+X]F]-X[X[-X]-FX[+FX]]",
              'Y': ["XY", [["fwd", 2]]],
              'X': ["XF+[X[+XF]]-X[X[-XY]-FX[+FX]]",
                    [["nop"]]],
             },
  //constants: draw commands, params (no re-write rules).
  constants: {"[": [["nop"]], 
              "]": [["nop"]],
              "+": [["tcw", 1]],
              "-": [["tcc", 1]]}
}

const dragonCurveAlphabet = {
  name: "Dragon Curve",
  variables: {'F': ["F+G", 
                    [["fwd", 2]]], 
               'G': ["F-G", 
                     [["fwd", 2]]],
             },
  //constants: draw commands, params (no re-write rules).
  constants: {"[": [["nop"]], 
              "]": [["nop"]],
              "+": [["tcw", 4]],
              "-": [["tcc", 4]]}
  
}


function draw(s, t, a) {
  let stack = [];
  let va = a.variables;
  let cn = a.constants;
  let pr = a.probs;
  //console.log(a.name);
  
  let verbs = {
    fwd: (steps) => {
      t.moveForward(steps);
    },
    tcw: (amount) => {
      t.turn("R", amount);
    },
    tcc: (amount) => {
      t.turn("L", amount);
    },
    tup: (steps) => {
      t.facing = "N";
      t.moveForward(steps);
    },
    // c[rgb][+-](n): increases/decreases turtle red, green, blue by n.
    "cr+": (amount) => {t.color['r']+=clamp(amount, 0, 255);},
    "cr-": (amount) => {t.color['r']-=clamp(amount, 0, 255);},
    "cg+": (amount) => {t.color['g']+=clamp(amount, 0, 255);},
    "cg-": (amount) => {t.color['g']-=clamp(amount, 0, 255);},
    "cb+": (amount) => {t.color['b']+=clamp(amount, 0, 255);},
    "cb-": (amount) => {t.color['b']-=clamp(amount, 0, 255);},
    tnt: (amount) => {
      t.tint(amount);
    },
    shd: (amount) => {
      t.shade(amount);
    },
    nop: () => {
      t.nop();
    }
  }
  
  for(let i = 0; i <= s.length; i++) {
    let c = s[i];
    if (pr != undefined && pr[c] != undefined) {
      verbs["nop"]();
    } else if(cn[c] != undefined) {
      if (c === "[") {
        stack.push({x: t.x, 
                    y: t.y,
                    facing: t.facing, 
                    color: Object.assign({}, t.color)});
//        t.color = {r:0,g:127,b:0,a:1};
      } else if (c === "]") {
        let o = stack.pop();
       // console.log(o.color["r"] - t.color["r"]);
        t.x = o.x;
        t.y = o.y;
        t.facing = o.facing;
        t.color = o.color;
 //       t.color = {r:0,g:155,b:0,a:1};
      } 
      for(let i = 0; i < cn[c].length; i++) {
        let [verb, arg] = cn[c][i];
        verbs[verb](arg);
      }
    } else if(va[c] != undefined) {
      for(let i = 0; i < va[c][1].length; i++) {
        let [verb, arg] = va[c][1][i];
        verbs[verb](arg);
      }
    } else {
      break;
    }
  }
}

function weighted_random(items, weights) {
// https://stackoverflow.com/questions/43566019/how-to-choose-a-weighted-random-array-element-in-javascript
    let i;

    for (i = 0; i < weights.length; i++)
        weights[i] += weights[i - 1] || 0;
    
    var random = Math.random() * weights[weights.length - 1];
    
    for (i = 0; i < weights.length; i++)
        if (weights[i] > random)
            break;
    
    return items[i];
}

function computeSentence(s, a) {
  let end = "";
  let va = a.variables;
  let cn = a.constants;
  let pr = a.probs;
  
  for(let i = 0; i < s.length; i++) {
    let c = s[i];
  //  console.log(c)
    if (va[c] != undefined) {
      end += va[c][0];
    } else if(cn[c] != undefined) {
      end += c;
    } else if(pr != undefined && pr[c] != undefined) {
      let items = [];
      let probs = [];
      
      for (let j = 0; j < pr[c].length; j++) {
        items = items.concat(pr[c][j][0]);
        probs = probs.concat(pr[c][j][1]);
      }
    //  console.log(items);
      end += weighted_random(items, probs);
    } else {
      end += "";
    }
  }
  return end;
}


function compute(s) {
  let end = "";
  let stack = [];
  turtle.facing = "N";
  for(let i = 0; i <= s.length; i++) {
    let c = s[i];

    if(c === 'A') {
      turtle.moveForward(2)
      end = end.concat('AA');
    } 
    else if (c === 'B') {
      turtle.moveForward(2);
      end = end.concat('A[B]B');
    }
    else if (c === 'C') {
      turtle.moveForward(1);
      turtle.color = rgba(0,128,0,1)
      end = end.concat('BX')
    }
    else if (c === "X") {
      turtle.goto(15,33);
      end = end.concat('[AB]')
    }
    else if (c === "[") {
      stack.push({x: turtle.x, y: turtle.y, facing: turtle.facing});
      turtle.turn("L",1);
      end += "["
    }
    else if (c === "]") {
      let o = stack.pop();
      turtle.x = o.x;
      turtle.y = o.y;
      turtle.facing = o.facing;
      
      turtle.turn("R",1);
      end += "]"
    }
  }
  return end;
}


//const canvas = document.getElementById('canvas');
//const ctx = canvas.getContext('2d');
const start_y = 256;
const start_x = start_y;
//const turtle = new Turtle(start_x,start_y,{r:90,g:194,b:93,a:0.6});
//turtle.facing = "N";
//applyRules(turtle, "B", computeSentence, 7, binaryTreeAlphabet);
//applyRules(turtle, "F", computeSentence, 13, dragonCurveAlphabet);
//applyRules(turtle, "X", computeSentence, 5, fernAlphabet);
//applyRules(turtle, "Y", computeSentence, 5, probAlphabet);
function drawMany(n, turtle, sentence, applyFn, compFn, iters, alphabet) {
    turtle.x-=128*n;
  for (let i = 1; i <= n; i++) {
    
    let cGreen = {r:90,g:194,b:93,a:0.6};
 //   console.log("drawn ", i);
    turtle.facing = "N";
    turtle.x+=(52*n)+iters*n;
    turtle.y = start_y;
    turtle.color = cGreen;
//    turtle.shade(0.01)
    applyFn(turtle, sentence, compFn, iters, alphabet);
  }
}


//turtle.moveForward(1);
//turtle.x = 63;
//turtle.y = 63;
//applyRules("B", compute, 4);
function renderVariables(variables) {
  
  console.log(ruleNames, rewrite, drawRules)
}


function Name(props) {
  return (
    <div>
      <h1>{props.alphabet.name}</h1>
    </div>
  );
}

//function Variables(props) {
//  let ruleNames = Object.keys(props.alphabet.variables);
//  let rules = Object.values(props.alphabet.variables);
//  let rewrite = [];
//  for (let i = 0; i<rules.length; i++) {
//    rewrite = rewrite.concat(rules[i][0]);
//  }
//  let drawRules = [];
//  for (let i = 0; i<rules.length; i++) {
//    drawRules = drawRules.concat(rules[i][1]);
//  }
//  console.log(ruleNames, rewrite);
//  
//  let nameListItems = ruleNames.map((rule) => 
//    <li key={rule}> 
//      {rule}
//    </li>
//  );
//  return (<ol>{nameListItems}</ol>);
//}

function variables(vars) {
  }

class Alphabet extends React.Component {
  render() {
    return (
      <div>
        <Name alphabet={this.props.alphabet}/>     
        <Variables alphabet={this.props.alphabet}/>
      </div>
    );
  }
  
}

const curalpha = probAlphabet;
//controls.render(<Alphabet alphabet={curalpha}/>)
//drawMany(3, turtle, "y", applyRules, computeSentence, 6, curalpha);

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }
    
    return this.props.children;
  }
}

const Canvas = props => {
  const canvasRef = React.useRef(null);
  const defaultColor = {r:90, g:194, b:90, a:0.6};
  const drw = turtle => {
    applyRules(turtle, props.sentence, computeSentence, props.iters, props.alphabet);
  }
  
  React.useEffect(() => {
    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');
    const turtle = new Turtle(props.x, props.y, defaultColor, context);
    
    drw(turtle);
  }, [drw])
  
  return <canvas ref={canvasRef} {...props}/>
}

function Variables({alphabet}) {
  const populateFields = () => {
    let a = [];
    let v = alphabet.variables
    for (r in v) {
      let newfield = { rule: r,
                       rewrite: v[r][0],
                       draw: v[r][1] };
      a = [...a, newfield]
    }
    return a
  };
  const [inputFields, setInputFields] = React.useState(
    
    [...populateFields(), {rule: '', rewrite: '', draw: ''}]
  );
  
  const handleFormChange = (index, event) => {
    let data = [...inputFields];
    data[index][event.target.name] = event.target.value;
    setInputFields(data);
  };
  
  const addFields = () => {
    let newfield = { rule: '', rewrite: '', draw: '' };
    setInputFields([...inputFields, newfield]);
  };
  
  const submit = (e) => {
    e.preventDefault();
    console.log(inputFields);
  };
  
//  populateFields();
  
  return (
    <div className="Variables">
      <form onSubmit={submit}>
        {inputFields.map((input, index) => {
          return (
          <div key={index}>
            <input
              name='rule'
              placeholder="Rule"
              value={input.rule}
              onChange={event => handleFormChange(index, event)}
            />
            <input
              name='rewrite'
              placeholder='Rewrite'
              value={input.rewrite}
              onChange={event => handleFormChange(index, event)}
            />
            <input
              name='draw'
              placeholder='Draw rule'
              value={input.draw}
              onChange={event => handleFormChange(index, event)}
            />
              <button type="button" onClick={addFields}>Add more...</button>
              <button>Submit</button>
          </div>
          )
        })}
      </form>
    </div>
  );
}

controls.render(<ErrorBoundary> <Canvas x="256" y="0" sentence="Y" iters="5" alphabet={probAlphabet}/> </ErrorBoundary>);

//for (let i = 0; i < data.length; i += 4) {
//  let x = (i / 4) % imageData.width;
//  let y = Math.floor((i / 4) / imageData.width);
//  
//  data[i] = ((y == 5) && (x == 5)) ? 255 : 0 ;        //red
//  data[i+1] = 0; //green
//  data[i+2] = ((y == 5) && (x == 5)) ? 255 : 0; //blue
//  data[i+3] = 255;      //alpha
//}
//ctx.fillRect(15,30,1,2);
//ctx.fillRect(16,28,1,2);

